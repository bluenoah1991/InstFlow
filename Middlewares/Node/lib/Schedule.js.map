{"version":3,"sources":["../src/Schedule.js"],"names":["Schedule","httpProxy","syncJob","scheduleJob","sync","bind","get","model","resourcePath","conditions","where","__sync__","__tries__","$lt","undefined","Object","assign","findAll","then","instances","Promise","resolve","reject","each","instance","callback","increment","post","err","catch","console","log","all","syncModel","orientation","$or","state","syncOutgoing","flush","data","resp","req","method","url","update","forEach","msg","create","instance_","plain","text","serviceUrl","bot_client_id","bot_client_name","user_client_id","user_client_name","channel_id","extra","findOrCreate","defaults","spread","created","msg_id","msg_type","source","agent","conversation_id","time","ext_type"],"mappings":"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","file":"Schedule.js","sourcesContent":["\"use strict\";\r\n\r\nimport async from 'async';\r\nimport Schedule_ from 'node-schedule';\r\nimport { UserModel, MessageModel, NLMessageModel } from './models';\r\nimport { CommonSerializer, IdentitySerializer } from './Serializer';\r\nimport HttpProxy from './HttpProxy';\r\n\r\nclass Schedule {\r\n    constructor() {\r\n        this.httpProxy = new HttpProxy();\r\n        this.syncJob = Schedule_.scheduleJob('*/3 * * * * *', this.sync.bind(this));\r\n    }\r\n\r\n    syncOutgoing() {\r\n        this.httpProxy.get('/api/v1/nlmsg/outgoing');\r\n    }\r\n\r\n    syncModel(model, resourcePath, conditions) {\r\n        let where = { __sync__: false, __tries__: { $lt: 10 } };\r\n        if (conditions != undefined) {\r\n            Object.assign(where, conditions);\r\n        }\r\n        return model.findAll({ where: where }).then(function (instances) {\r\n            return new Promise(function (resolve, reject) {\r\n                async.each(instances, function (instance, callback) {\r\n                    instance.increment('__tries__').then(function () {\r\n                        this.httpProxy.post(resourcePath, CommonSerializer(instance));\r\n                        callback();\r\n                    }.bind(this));\r\n                }.bind(this), function (err) {\r\n                    resolve(err);\r\n                });\r\n            }.bind(this));\r\n        }.bind(this)).catch(function(err){\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        Promise.all([\r\n            this.syncModel(UserModel, '/api/v1/users'),\r\n            this.syncModel(MessageModel, '/api/v1/messages'),\r\n            this.syncModel(NLMessageModel, '/api/v1/nlmsg/incoming', { orientation: 1 }),\r\n            this.syncModel(NLMessageModel, '/api/v1/nlmsg/outgoing', { orientation: 2, $or: [ {state: 'finish'}, {state: 'failed'}] })\r\n        ]).then(function () {\r\n            this.syncOutgoing();\r\n            this.httpProxy.flush(function (err, data, resp, req) {\r\n                if (err) {\r\n                    console.log(err);\r\n                } else {\r\n                    if (req.method == 'post' && req.url == '/api/v1/users') {\r\n                        UserModel.update({ __sync__: true }, {\r\n                            where: IdentitySerializer(data, ['channel_id', 'user_id'])\r\n                        });\r\n                    } else if (req.method == 'post' && req.url == '/api/v1/messages') {\r\n                        MessageModel.update({ __sync__: true }, {\r\n                            where: IdentitySerializer(data, ['msg_id'])\r\n                        });\r\n                    } else if (req.method == 'post' && req.url == '/api/v1/nlmsg/incoming') {\r\n                        NLMessageModel.update({ __sync__: true }, {\r\n                            where: IdentitySerializer(data, ['msg_id'])\r\n                        });\r\n                    } else if (req.method == 'post' && req.url == '/api/v1/nlmsg/outgoing') {\r\n                        NLMessageModel.update({ __sync__: true }, {\r\n                            where: IdentitySerializer(data, ['msg_id'])\r\n                        });\r\n                    } else if (req.method == 'get' && req.url == '/api/v1/nlmsg/outgoing'){\r\n                        data.forEach(function(msg){\r\n                            NLMessageModel.create(msg).then(function (instance) {\r\n                                let instance_ = instance.get({ plain: true });\r\n                                console.log(instance_.text);\r\n                                return instance_;\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }.bind(this)).catch(function(err){\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveUser(\r\n        serviceUrl, bot_client_id, bot_client_name,\r\n        user_client_id, user_client_name, channel_id, extra) {\r\n        return UserModel.findOrCreate({\r\n            where: {\r\n                channel_id: channel_id,\r\n                user_client_id: user_client_id\r\n            },\r\n            defaults: {\r\n                serviceUrl: serviceUrl,\r\n                bot_client_id: bot_client_id,\r\n                bot_client_name: bot_client_name,\r\n                user_client_name: user_client_name,\r\n                extra: extra\r\n            }\r\n        }).spread(function (instance, created) {\r\n            console.log(instance.get({ plain: true }));\r\n            return created;\r\n        });\r\n    }\r\n\r\n    saveMessage(\r\n        msg_id, msg_type, text, source, agent, serviceUrl,\r\n        user_client_id, user_client_name, bot_client_id,\r\n        bot_client_name, channel_id, conversation_id, orientation, time) {\r\n        return MessageModel.create({\r\n            msg_id: msg_id,\r\n            msg_type: msg_type,\r\n            text: text,\r\n            source: source,\r\n            agent: agent,\r\n            serviceUrl: serviceUrl,\r\n            user_client_id: user_client_id,\r\n            user_client_name: user_client_name,\r\n            bot_client_id: bot_client_id,\r\n            bot_client_name: bot_client_name,\r\n            channel_id: channel_id,\r\n            conversation_id: conversation_id,\r\n            orientation: orientation,\r\n            time: time\r\n        }).then(function (instance) {\r\n            let instance_ = instance.get({ plain: true });\r\n            console.log(instance_.text);\r\n            return instance_;\r\n        });\r\n    }\r\n\r\n    saveNLMessage(\r\n        ext_type, msg_id, msg_type, text, source, agent, serviceUrl,\r\n        user_client_id, user_client_name, bot_client_id,\r\n        bot_client_name, channel_id, conversation_id, orientation, time) {\r\n        return NLMessageModel.create({\r\n            ext_type: ext_type,\r\n            msg_id: msg_id,\r\n            msg_type: msg_type,\r\n            text: text,\r\n            source: source,\r\n            agent: agent,\r\n            serviceUrl: serviceUrl,\r\n            user_client_id: user_client_id,\r\n            user_client_name: user_client_name,\r\n            bot_client_id: bot_client_id,\r\n            bot_client_name: bot_client_name,\r\n            channel_id: channel_id,\r\n            conversation_id: conversation_id,\r\n            orientation: orientation,\r\n            time: time\r\n        }).then(function (instance) {\r\n            let instance_ = instance.get({ plain: true });\r\n            console.log(instance_.text);\r\n            return instance_;\r\n        });\r\n    }\r\n}\r\n\r\nexport default new Schedule();"]}