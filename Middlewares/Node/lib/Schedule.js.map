{"version":3,"sources":["../src/Schedule.js"],"names":["Schedule","interval","process","env","SYNC_INTERVAL","rule","syncJob","scheduleJob","sync","bind","model","resourcePath","identities","findAll","where","__sync__","__tries__","$lt","then","instances","httpProxy","each","instance","callback","increment","post","err","console","log","hasCache","flush","data","resp","update","syncModel","serviceUrl","bot_client_id","bot_client_name","user_client_id","user_client_name","channel_id","extra","findOrCreate","defaults","spread","created","get","plain","msg_id","msg_type","text","source","agent","conversation_id","orientation","time","create","instance_"],"mappings":"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","file":"Schedule.js","sourcesContent":["\"use strict\";\r\n\r\nimport async from 'async';\r\nimport Schedule_ from 'node-schedule';\r\nimport {UserModel, MessageModel} from './models';\r\nimport {CommonSerializer, IdentitySerializer} from './Serializer';\r\nimport HttpProxy from './HttpProxy';\r\n\r\nclass Schedule {\r\n    constructor(){\r\n        let interval = process.env.SYNC_INTERVAL || 5;\r\n        this.rule = `*/${interval} * * * *`;\r\n        this.syncJob = Schedule_.scheduleJob(this.rule, this.sync.bind(this));\r\n    }\r\n\r\n    syncModel(model, resourcePath, identities){\r\n        model.findAll({where: {__sync__: false, __tries__: {$lt: 3}}}).then(function(instances){\r\n            var httpProxy = new HttpProxy();\r\n            async.each(instances, function(instance, callback){\r\n                instance.increment('__tries__').then(function(){\r\n                    httpProxy.post(resourcePath, CommonSerializer(instance));\r\n                    callback();\r\n                }.bind(this));\r\n            }, function(err){\r\n                if(err){\r\n                    console.log(err);\r\n                } else if(httpProxy.hasCache()){\r\n                    httpProxy.flush(function(err, data, resp){\r\n                        if(err){\r\n                            console.log(err);\r\n                        } else {\r\n                            model.update({__sync__: true}, { \r\n                                where: IdentitySerializer(data, identities)\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    sync(){\r\n        this.syncModel(UserModel, '/api/v1/users', ['channel_id', 'user_id']);\r\n        this.syncModel(MessageModel, '/api/v1/messages', ['msg_id']);\r\n    }\r\n\r\n    saveUser(\r\n        serviceUrl, bot_client_id, bot_client_name,\r\n        user_client_id, user_client_name, channel_id, extra){\r\n        return UserModel.findOrCreate({\r\n            where: {\r\n                channel_id: channel_id,\r\n                user_client_id: user_client_id\r\n            }, \r\n            defaults: {\r\n                serviceUrl: serviceUrl,\r\n                bot_client_id: bot_client_id,\r\n                bot_client_name: bot_client_name,\r\n                user_client_name: user_client_name,\r\n                extra: extra\r\n            }\r\n        }).spread(function(instance, created){\r\n            console.log(instance.get({plain: true}));\r\n            return created;\r\n        });\r\n    }\r\n\r\n    saveMessage(\r\n        msg_id, msg_type, text, source, agent, serviceUrl, \r\n        user_client_id, user_client_name, bot_client_id, \r\n        bot_client_name, channel_id, conversation_id, orientation, time){\r\n        return MessageModel.create({\r\n            msg_id: msg_id,\r\n            msg_type: msg_type,\r\n            text: text,\r\n            source: source,\r\n            agent: agent,\r\n            serviceUrl: serviceUrl,\r\n            user_client_id: user_client_id,\r\n            user_client_name: user_client_name,\r\n            bot_client_id: bot_client_id,\r\n            bot_client_name: bot_client_name,\r\n            channel_id: channel_id,\r\n            conversation_id: conversation_id,\r\n            orientation: orientation,\r\n            time: time\r\n        }).then(function(instance){\r\n            let instance_ = instance.get({plain: true});\r\n            console.log(instance_.text);\r\n            return instance_;\r\n        });\r\n    }\r\n}\r\n\r\nexport default new Schedule();"]}