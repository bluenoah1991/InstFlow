{"version":3,"sources":["../src/Schedule.js"],"names":["Schedule","httpProxy","interval","process","env","SYNC_INTERVAL","rule","syncJob","scheduleJob","sync","bind","model","resourcePath","conditions","where","__sync__","__tries__","$lt","undefined","Object","assign","findAll","then","instances","Promise","resolve","reject","each","instance","callback","increment","post","err","catch","console","log","all","syncModel","orientation","hasCache","flush","data","resp","req","method","url","update","serviceUrl","bot_client_id","bot_client_name","user_client_id","user_client_name","channel_id","extra","findOrCreate","defaults","spread","created","get","plain","msg_id","msg_type","text","source","agent","conversation_id","time","create","instance_","ext_type"],"mappings":"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","file":"Schedule.js","sourcesContent":["\"use strict\";\r\n\r\nimport async from 'async';\r\nimport Schedule_ from 'node-schedule';\r\nimport { UserModel, MessageModel, NLMessageModel } from './models';\r\nimport { CommonSerializer, IdentitySerializer } from './Serializer';\r\nimport HttpProxy from './HttpProxy';\r\n\r\nclass Schedule {\r\n    constructor() {\r\n        this.httpProxy = new HttpProxy();\r\n        let interval = process.env.SYNC_INTERVAL || 5;\r\n        this.rule = `*/${interval} * * * *`;\r\n        this.syncJob = Schedule_.scheduleJob(this.rule, this.sync.bind(this));\r\n    }\r\n\r\n    syncOutgoing() {\r\n\r\n    }\r\n\r\n    syncModel(model, resourcePath, conditions) {\r\n        let where = { __sync__: false, __tries__: { $lt: 3 } };\r\n        if (conditions != undefined) {\r\n            Object.assign(where, conditions);\r\n        }\r\n        return model.findAll({ where: where }).then(function (instances) {\r\n            return new Promise(function (resolve, reject) {\r\n                async.each(instances, function (instance, callback) {\r\n                    instance.increment('__tries__').then(function () {\r\n                        this.httpProxy.post(resourcePath, CommonSerializer(instance));\r\n                        callback();\r\n                    }.bind(this));\r\n                }.bind(this), function (err) {\r\n                    resolve(err);\r\n                });\r\n            }.bind(this));\r\n        }.bind(this)).catch(function(err){\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    sync() {\r\n        Promise.all([\r\n            this.syncModel(UserModel, '/api/v1/users'),\r\n            this.syncModel(MessageModel, '/api/v1/messages'),\r\n            this.syncModel(NLMessageModel, '/api/v1/nlmsg/incoming', { orientation: 1 })\r\n        ]).then(function () {\r\n            if (this.httpProxy.hasCache()) {\r\n                this.httpProxy.flush(function (err, data, resp, req) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        if (req.method == 'post' && req.url == '/api/v1/users') {\r\n                            UserModel.update({ __sync__: true }, {\r\n                                where: IdentitySerializer(data, ['channel_id', 'user_id'])\r\n                            });\r\n                        } else if (req.method == 'post' && req.url == '/api/v1/messages') {\r\n                            MessageModel.update({ __sync__: true }, {\r\n                                where: IdentitySerializer(data, ['msg_id'])\r\n                            });\r\n                        } else if (req.method == 'post' && req.url == '/api/v1/nlmsg/incoming') {\r\n                            NLMessageModel.update({ __sync__: true }, {\r\n                                where: IdentitySerializer(data, ['msg_id'])\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }.bind(this)).catch(function(err){\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveUser(\r\n        serviceUrl, bot_client_id, bot_client_name,\r\n        user_client_id, user_client_name, channel_id, extra) {\r\n        return UserModel.findOrCreate({\r\n            where: {\r\n                channel_id: channel_id,\r\n                user_client_id: user_client_id\r\n            },\r\n            defaults: {\r\n                serviceUrl: serviceUrl,\r\n                bot_client_id: bot_client_id,\r\n                bot_client_name: bot_client_name,\r\n                user_client_name: user_client_name,\r\n                extra: extra\r\n            }\r\n        }).spread(function (instance, created) {\r\n            console.log(instance.get({ plain: true }));\r\n            return created;\r\n        });\r\n    }\r\n\r\n    saveMessage(\r\n        msg_id, msg_type, text, source, agent, serviceUrl,\r\n        user_client_id, user_client_name, bot_client_id,\r\n        bot_client_name, channel_id, conversation_id, orientation, time) {\r\n        return MessageModel.create({\r\n            msg_id: msg_id,\r\n            msg_type: msg_type,\r\n            text: text,\r\n            source: source,\r\n            agent: agent,\r\n            serviceUrl: serviceUrl,\r\n            user_client_id: user_client_id,\r\n            user_client_name: user_client_name,\r\n            bot_client_id: bot_client_id,\r\n            bot_client_name: bot_client_name,\r\n            channel_id: channel_id,\r\n            conversation_id: conversation_id,\r\n            orientation: orientation,\r\n            time: time\r\n        }).then(function (instance) {\r\n            let instance_ = instance.get({ plain: true });\r\n            console.log(instance_.text);\r\n            return instance_;\r\n        });\r\n    }\r\n\r\n    saveNLMessage(\r\n        ext_type, msg_id, msg_type, text, source, agent, serviceUrl,\r\n        user_client_id, user_client_name, bot_client_id,\r\n        bot_client_name, channel_id, conversation_id, orientation, time) {\r\n        return NLMessageModel.create({\r\n            ext_type: ext_type,\r\n            msg_id: msg_id,\r\n            msg_type: msg_type,\r\n            text: text,\r\n            source: source,\r\n            agent: agent,\r\n            serviceUrl: serviceUrl,\r\n            user_client_id: user_client_id,\r\n            user_client_name: user_client_name,\r\n            bot_client_id: bot_client_id,\r\n            bot_client_name: bot_client_name,\r\n            channel_id: channel_id,\r\n            conversation_id: conversation_id,\r\n            orientation: orientation,\r\n            time: time\r\n        }).then(function (instance) {\r\n            let instance_ = instance.get({ plain: true });\r\n            console.log(instance_.text);\r\n            return instance_;\r\n        });\r\n    }\r\n}\r\n\r\nexport default new Schedule();"]}