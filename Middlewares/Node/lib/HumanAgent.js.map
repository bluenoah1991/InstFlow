{"version":3,"sources":["../src/HumanAgent.js"],"names":["AcquireMessage","session","ext_type","msg_id","v1","msg_type","message","type","text","source","agent","serviceUrl","address","user_client_id","user","id","user_client_name","name","bot_client_id","bot","bot_client_name","channel_id","channelId","conversation_id","conversation","time","Date","getTime","saveNLMessage","BeginOutgoingMessage","setTimeout","findAll","where","__sync__","state","orientation","then","instances","Promise","resolve","reject","each","instance","callback","undefined","msg","useAuth","send","err","console","log","update","bind","module","exports","opts","lib","dialog","args","trim","toUpperCase","endDialog","referer","replaceDialog"],"mappings":"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","file":"HumanAgent.js","sourcesContent":["\"use strict\";\r\n\r\nimport \"babel-polyfill\";\r\nimport uuid from 'node-uuid';\r\nimport async from 'async';\r\n\r\nimport {Message, Library, SimpleDialog} from 'botbuilder';\r\nimport schedule from './Schedule';\r\nimport { IdentitySerializer } from './Serializer';\r\nimport { NLMessageModel } from './models';\r\n\r\nfunction AcquireMessage(session, ext_type){\r\n    let msg_id = uuid.v1();\r\n    let msg_type = session.message.type;\r\n    let text = session.message.text;\r\n    let source = session.message.source;\r\n    let agent = session.message.agent;\r\n    let serviceUrl = session.message.address.serviceUrl;\r\n    let user_client_id = session.message.address.user.id;\r\n    let user_client_name = session.message.address.user.name;\r\n    let bot_client_id = session.message.address.bot.id;\r\n    let bot_client_name = session.message.address.bot.name;\r\n    let channel_id = session.message.address.channelId;\r\n    let conversation_id = session.message.address.conversation.id;\r\n    let time = new Date().getTime();\r\n    schedule.saveNLMessage(\r\n        ext_type, msg_id, msg_type, text, source, agent, serviceUrl, \r\n        user_client_id, user_client_name, bot_client_id, bot_client_name, \r\n        channel_id, conversation_id, 1, time\r\n    );\r\n}\r\n\r\nfunction BeginOutgoingMessage(bot){\r\n    setTimeout(function(){\r\n        NLMessageModel.findAll({ where: { \r\n            __sync__: false, \r\n            state: 'sending',\r\n            orientation: 2\r\n        }}).then(function (instances) {\r\n            return new Promise(function (resolve, reject) {\r\n                async.each(instances, function (instance, callback) {\r\n                    if(instance.conversation_id != undefined){\r\n                        let msg = new Message().address({\r\n                            channelId: instance.channel_id,\r\n                            user: {\r\n                                id: instance.user_client_id,\r\n                                name: instance.user_client_name\r\n                            },\r\n                            conversation: {\r\n                                id: instance.conversation_id\r\n                            },\r\n                            bot: {\r\n                                id: instance.bot_client_id,\r\n                                name: instance.bot_client_name\r\n                            },\r\n                            serviceUrl: instance.serviceUrl,\r\n                            useAuth: true\r\n                        }).text(instance.text);\r\n                        let time = new Date().getTime();\r\n                        bot.send(msg, function(err){\r\n                            console.log(err);\r\n                            NLMessageModel.update({ state: 'finish', time: time }, {\r\n                                where: IdentitySerializer(instance, ['msg_id'])\r\n                            });\r\n                            callback();\r\n                        });\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                }.bind(this), function (err) {\r\n                    resolve(err);\r\n                });\r\n            }.bind(this));\r\n        }).then(function(){\r\n            BeginOutgoingMessage(bot);\r\n        });\r\n    }, 1000);\r\n}\r\n\r\nmodule.exports = function(opts){\r\n    if(opts == undefined || opts.bot == undefined){\r\n        throw 'Option \\'bot\\' not found.';\r\n    }\r\n\r\n    var lib = new Library('human_agent');\r\n\r\n    lib.dialog('/', function(session, args){\r\n        if(session.message.text != undefined && session.message.text.trim().toUpperCase() == 'Q'){\r\n            session.send('Exit Human Agent.');\r\n            AcquireMessage(session, 'close');\r\n            session.endDialog();\r\n        } else if(args != undefined && args.referer == '/start') {\r\n            // notifying the instflow server that started a new dialog\r\n            AcquireMessage(session, 'start');\r\n        } else {\r\n            // talk\r\n            AcquireMessage(session, 'message');\r\n        }\r\n    });\r\n\r\n    lib.dialog('/start', function(session, args){\r\n        session.send('Enter Human Agent (Reply to Q exit):');\r\n        session.replaceDialog('/', {\r\n            referer: '/start'\r\n        });\r\n    });\r\n\r\n    BeginOutgoingMessage(opts.bot);\r\n    return lib;\r\n};"]}