{"version":3,"sources":["../src/HttpProxy.js"],"names":["tt","HttpProxy","createNewReq","auth_token","process","env","SERVICE_AUTH_TOKEN","httpclient","createJsonClient","url","SERVICE_BASE_URL","version","headers","defaultPath","SERVICE_DEFAULT_PATH","defaultMethod","SERVICE_DEFAULT_METHOD","req","method","params","ops","push","http","length","callback","m","bind","err","res","obj","console","log","results","forEach","resp","index","status","data","body","error"],"mappings":"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","file":"HttpProxy.js","sourcesContent":["\"use strict\";\r\n\r\nimport clone from 'clone';\r\nimport restify from 'restify';\r\n\r\nconst tt = {\r\n    \"ops\": [],\r\n    \"sequential\": true\r\n}\r\n\r\nclass HttpProxy{\r\n    constructor(){\r\n        this.createNewReq();\r\n        this.auth_token = `Token token=${process.env.SERVICE_AUTH_TOKEN}`;\r\n        this.httpclient = restify.createJsonClient({\r\n            url: process.env.SERVICE_BASE_URL || 'https://example.instflow.com/',\r\n            version: '*',\r\n            headers: {\r\n                'Authorization': this.auth_token\r\n            }\r\n        });\r\n        this.defaultPath = process.env.SERVICE_DEFAULT_PATH || '/api/v1/batch';\r\n        this.defaultMethod = process.env.SERVICE_DEFAULT_METHOD || 'post';\r\n    }\r\n\r\n    createNewReq(){\r\n        this.req = clone(tt);\r\n    }\r\n\r\n    http(method, url, params={}, headers={}){\r\n        this.req.ops.push({\r\n            method: method,\r\n            url: url,\r\n            params: params,\r\n            headers: headers\r\n        });\r\n    }\r\n\r\n    get(url, params={}, headers={}){\r\n        this.http('get', url, params, headers);\r\n    }\r\n\r\n    post(url, params={}, headers={}){\r\n        this.http('post', url, params, headers);\r\n    }\r\n\r\n    put(url, params={}, headers={}){\r\n        this.http('put', url, params, headers);\r\n    }\r\n\r\n    patch(url, params={}, headers={}){\r\n        this.http('patch', url, params, headers);\r\n    }\r\n\r\n    delete(url, params={}, headers={}){\r\n        this.http('delete', url, params, headers);\r\n    }\r\n\r\n    hasCache(){\r\n        return this.req.ops.length > 0;\r\n    }\r\n\r\n    flush(callback){\r\n        let req = this.req;\r\n        this.createNewReq();\r\n        var m = this.httpclient[this.defaultMethod];\r\n        if(typeof m == 'function'){\r\n            m = m.bind(this.httpclient);\r\n            m(this.defaultPath, req, function(err, req, res, obj){\r\n                if(err){\r\n                    console.log(err);\r\n                } else {\r\n                    let results = obj.results;\r\n                    results.forEach(function(resp, index){\r\n                        let status = resp.status;\r\n                        let data = resp.body;\r\n                        let err = data.error;\r\n                        callback(err, data, resp);\r\n                    });\r\n                }\r\n                // Ignore response\r\n            });\r\n        } else {\r\n            throw \"Invalid HTTP verb, must be one of: get, post, put, patch, del.\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default new HttpProxy();"]}